<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Free online PDF tools - convert, merge, split, compress, edit PDFs and more. JPG to PDF, Word to PDF, PowerPoint to PDF and other useful PDF utilities.">
    <meta name="keywords" content="PDF converter, merge PDF, split PDF, compress PDF, JPG to PDF, Word to PDF, PDF tools">
    <title>Complete PDF Tools - Convert, Merge, Split, Compress</title>
    <script src="https://unpkg.com/pdf-lib@1.17.1/dist/pdf-lib.min.js"></script>
    <script src="https://unpkg.com/downloadjs@1.4.7"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://unpkg.com/@pdf-lib/fontkit@0.0.4/dist/fontkit.umd.min.js"></script>
    <style>
        :root {
            --primary-color: #4285f4;
            --secondary-color: #34a853;
            --accent-color: #ea4335;
            --light-color: #f8f9fa;
            --dark-color: #202124;
            --gray-color: #5f6368;
            --border-radius: 8px;
            --box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
            --error-color: #dc3545;
            --warning-color: #ffc107;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Roboto', sans-serif;
            line-height: 1.6;
            color: var(--dark-color);
            background-color: #f5f5f5;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        a {
            text-decoration: none;
            color: var(--primary-color);
            transition: var(--transition);
        }
        
        a:hover {
            color: var(--accent-color);
        }
        
        header {
            background-color: white;
            box-shadow: var(--box-shadow);
            position: sticky;
            top: 0;
            z-index: 100;
            padding: 15px 0;
            margin-bottom: 30px;
        }
        
        .header-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .logo {
            display: flex;
            align-items: center;
            font-size: 24px;
            font-weight: 700;
            color: var(--primary-color);
        }
        
        .logo i {
            margin-right: 10px;
            color: var(--accent-color);
        }
        
        nav ul {
            display: flex;
            list-style: none;
        }
        
        nav ul li {
            margin-left: 20px;
        }
        
        nav ul li a {
            font-weight: 500;
            color: var(--gray-color);
        }
        
        nav ul li a:hover {
            color: var(--primary-color);
        }
        
        .mobile-menu-btn {
            display: none;
            background: none;
            border: none;
            font-size: 24px;
            color: var(--gray-color);
            cursor: pointer;
        }
        
        .hero {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 60px 0;
            text-align: center;
            border-radius: var(--border-radius);
            margin-bottom: 30px;
        }
        
        .hero h1 {
            font-size: 2.5rem;
            margin-bottom: 20px;
        }
        
        .hero p {
            font-size: 1.2rem;
            max-width: 800px;
            margin: 0 auto 30px;
        }
        
        .cta-buttons {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-bottom: 30px;
        }
        
        .btn {
            display: inline-block;
            padding: 12px 24px;
            border-radius: var(--border-radius);
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
        }
        
        .btn-primary {
            background-color: white;
            color: var(--primary-color);
        }
        
        .btn-primary:hover {
            background-color: rgba(255, 255, 255, 0.9);
            transform: translateY(-2px);
        }
        
        .btn-secondary {
            background-color: transparent;
            color: white;
            border: 2px solid white;
        }
        
        .btn-secondary:hover {
            background-color: rgba(255, 255, 255, 0.1);
            transform: translateY(-2px);
        }
        
        .tools-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }
        
        .tool-card {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 25px;
            text-align: center;
            transition: var(--transition);
            cursor: pointer;
        }
        
        .tool-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        
        .tool-card i {
            font-size: 40px;
            color: var(--primary-color);
            margin-bottom: 15px;
        }
        
        .tool-interface {
            display: none;
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 30px;
            margin: 40px 0;
        }
        
        .tool-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }
        
        .drop-area {
            border: 2px dashed var(--gray-color);
            border-radius: var(--border-radius);
            padding: 40px;
            text-align: center;
            margin-bottom: 20px;
            transition: var(--transition);
            cursor: pointer;
        }
        
        .drop-area.highlight {
            border-color: var(--primary-color);
            background-color: rgba(66, 133, 244, 0.05);
        }
        
        .options {
            margin: 20px 0;
        }
        
        .option-group {
            margin-bottom: 15px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }
        
        select, input[type="range"], input[type="number"] {
            width: 100%;
            padding: 10px;
            border-radius: var(--border-radius);
            border: 1px solid #ddd;
            font-family: inherit;
        }
        
        button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: var(--border-radius);
            cursor: pointer;
            font-size: 16px;
            margin-right: 10px;
            transition: var(--transition);
        }
        
        button:hover {
            opacity: 0.9;
        }
        
        .results {
            margin-top: 20px;
            display: none;
        }
        
        .result-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            background-color: #f9f9f9;
            border-radius: var(--border-radius);
            margin-bottom: 10px;
        }
        
        .progress-bar {
            width: 100%;
            background-color: #eee;
            border-radius: var(--border-radius);
            margin: 20px 0;
            display: none;
        }
        
        .progress {
            height: 20px;
            background-color: var(--primary-color);
            border-radius: var(--border-radius);
            width: 0%;
            transition: width 0.3s;
        }
        
        .error-message {
            color: var(--error-color);
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            padding: 10px;
            border-radius: var(--border-radius);
            margin: 10px 0;
        }
        
        .file-info {
            margin: 10px 0;
            padding: 10px;
            background-color: var(--light-color);
            border-radius: var(--border-radius);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .file-size-warning {
            color: #856404;
            background-color: #fff3cd;
            border: 1px solid #ffeeba;
            padding: 10px;
            border-radius: var(--border-radius);
            margin: 10px 0;
        }
        
        .remove-file {
            background: none;
            border: none;
            color: var(--error-color);
            font-size: 20px;
            cursor: pointer;
            padding: 0 5px;
        }
        
        @media (max-width: 768px) {
            .header-container {
                padding: 0 15px;
            }
            
            nav {
                display: none;
                position: absolute;
                top: 70px;
                left: 0;
                right: 0;
                background-color: white;
                box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);
                padding: 20px;
            }
            
            nav.active {
                display: block;
            }
            
            nav ul {
                flex-direction: column;
            }
            
            nav ul li {
                margin: 0 0 15px 0;
            }
            
            .mobile-menu-btn {
                display: block;
            }
            
            .cta-buttons {
                flex-direction: column;
                gap: 10px;
            }
            
            .btn {
                width: 100%;
            }
            
            .tool-interface {
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <header>
        <div class="header-container">
            <a href="#" class="logo">
                <i>📄</i>
                PDF Tools Pro
            </a>
            <button class="mobile-menu-btn" id="mobileMenuBtn">
                <i class="fas fa-bars"></i>
            </button>
            <nav id="mainNav">
                <ul>
                    <li><a href="#">Home</a></li>
                    <li><a href="#tools">Tools</a></li>
                    <li><a href="#features">Features</a></li>
                </ul>
            </nav>
        </div>
    </header>

    <section class="hero">
        <h1>All Your PDF Needs in One Place</h1>
        <p>Convert, merge, split, compress, and edit PDF files with our free online tools. No installation required, completely free to use.</p>
        <div class="cta-buttons">
            <a href="#tools" class="btn btn-primary">Explore Tools</a>
            <a href="#how-it-works" class="btn btn-secondary">How It Works</a>
        </div>
    </section>

    <section id="tools">
        <h2>PDF Tools</h2>
        <p>Choose from our wide range of PDF tools to convert, edit, compress, and more</p>
        
        <div class="tools-grid">
            <!-- Convert to PDF -->
            <div class="tool-card" data-tool="jpg-to-pdf">
                <i>🖼️</i>
                <h3>JPG to PDF</h3>
                <p>Convert images to PDF documents</p>
            </div>
            <div class="tool-card" data-tool="word-to-pdf">
                <i>📝</i>
                <h3>Word to PDF</h3>
                <p>Convert DOC/DOCX to PDF</p>
            </div>
            <div class="tool-card" data-tool="ppt-to-pdf">
                <i>📊</i>
                <h3>PPT to PDF</h3>
                <p>Convert PowerPoint to PDF</p>
            </div>
            <div class="tool-card" data-tool="excel-to-pdf">
                <i>📈</i>
                <h3>Excel to PDF</h3>
                <p>Convert XLS/XLSX to PDF</p>
            </div>
            
            <!-- Convert from PDF -->
            <div class="tool-card" data-tool="pdf-to-jpg">
                <i>📷</i>
                <h3>PDF to JPG</h3>
                <p>Convert PDF pages to images</p>
            </div>
            <div class="tool-card" data-tool="pdf-to-word">
                <i>📄</i>
                <h3>PDF to Word</h3>
                <p>Convert PDF to DOC/DOCX</p>
            </div>
            
            <!-- Edit & Organize -->
            <div class="tool-card" data-tool="merge-pdf">
                <i>🧩</i>
                <h3>Merge PDF</h3>
                <p>Combine multiple PDFs into one</p>
            </div>
            <div class="tool-card" data-tool="split-pdf">
                <i>✂️</i>
                <h3>Split PDF</h3>
                <p>Split PDF into multiple files</p>
            </div>
            <div class="tool-card" data-tool="remove-pages">
                <i>🗑️</i>
                <h3>Remove Pages</h3>
                <p>Delete pages from PDF</p>
            </div>
            <div class="tool-card" data-tool="extract-pages">
                <i>📑</i>
                <h3>Extract Pages</h3>
                <p>Extract specific pages</p>
            </div>
            
            <!-- Optimize & Secure -->
            <div class="tool-card" data-tool="compress-pdf">
                <i>🗜️</i>
                <h3>Compress PDF</h3>
                <p>Reduce PDF file size</p>
            </div>
            <div class="tool-card" data-tool="protect-pdf">
                <i>🔒</i>
                <h3>Protect PDF</h3>
                <p>Add password protection</p>
            </div>
            <div class="tool-card" data-tool="unlock-pdf">
                <i>🔓</i>
                <h3>Unlock PDF</h3>
                <p>Remove password protection</p>
            </div>
            <div class="tool-card" data-tool="sign-pdf">
                <i>✍️</i>
                <h3>Sign PDF</h3>
                <p>Add digital signature</p>
            </div>
        </div>
    </section>

    <!-- Tool Interface -->
    <div class="tool-interface" id="toolInterface">
        <div class="tool-header">
            <h2 id="toolTitle">Tool Name</h2>
            <button id="closeTool">✕ Close</button>
        </div>
        
        <div class="drop-area" id="dropArea">
            <p>📁 Drag & drop files here or click to browse</p>
            <input type="file" id="fileInput" style="display: none;" multiple>
        </div>
        
        <div class="options" id="options">
            <!-- Options will be dynamically inserted here -->
        </div>
        
        <div class="progress-bar" id="progressBar">
            <div class="progress" id="progress"></div>
        </div>
        
        <button id="processBtn">Process</button>
        <button id="resetBtn">Reset</button>
        
        <div class="results" id="results">
            <!-- Results will be dynamically inserted here -->
        </div>
    </div>

    <section id="features">
        <h2>Why Choose Our PDF Tools?</h2>
        <div class="tools-grid">
            <div class="tool-card">
                <i>🔒</i>
                <h3>Secure Processing</h3>
                <p>All processing happens in your browser. Your files never leave your device.</p>
            </div>
            <div class="tool-card">
                <i>⚡</i>
                <h3>Fast & Efficient</h3>
                <p>Optimized tools that work quickly without compromising quality.</p>
            </div>
            <div class="tool-card">
                <i>💻</i>
                <h3>No Installation</h3>
                <p>Works directly in your web browser on any device.</p>
            </div>
            <div class="tool-card">
                <i>🆓</i>
                <h3>Free to Use</h3>
                <p>All tools are completely free with no watermarks.</p>
            </div>
        </div>
    </section>

    <footer>
        <p>&copy; 2023 PDF Tools Pro. All rights reserved.</p>
    </footer>

    <script>
        // DOM Elements
        const toolCards = document.querySelectorAll('.tool-card');
        const toolInterface = document.getElementById('toolInterface');
        const toolTitle = document.getElementById('toolTitle');
        const dropArea = document.getElementById('dropArea');
        const fileInput = document.getElementById('fileInput');
        const optionsDiv = document.getElementById('options');
        const processBtn = document.getElementById('processBtn');
        const resetBtn = document.getElementById('resetBtn');
        const resultsDiv = document.getElementById('results');
        const progressBar = document.getElementById('progressBar');
        const progress = document.getElementById('progress');
        const closeToolBtn = document.getElementById('closeTool');
        const mobileMenuBtn = document.getElementById('mobileMenuBtn');
        const mainNav = document.getElementById('mainNav');
        
        // Current tool and files
        let currentTool = null;
        let files = [];
        
        // Maximum file size (10MB)
        const MAX_FILE_SIZE = 10 * 1024 * 1024;
        
        // Tool configurations
        const toolConfigs = {
            'jpg-to-pdf': {
                title: 'JPG to PDF Converter',
                options: `
                    <div class="option-group">
                        <label for="pageSize">Page Size:</label>
                        <select id="pageSize">
                            <option value="a4">A4 (210 × 297 mm)</option>
                            <option value="letter">Letter (8.5 × 11 in)</option>
                            <option value="auto">Auto (Fit to image)</option>
                        </select>
                    </div>
                    <div class="option-group">
                        <label for="orientation">Orientation:</label>
                        <select id="orientation">
                            <option value="portrait">Portrait</option>
                            <option value="landscape">Landscape</option>
                        </select>
                    </div>
                    <div class="option-group">
                        <label for="margin">Margin (mm):</label>
                        <input type="number" id="margin" min="0" max="50" value="10">
                    </div>
                    <div class="option-group">
                        <input type="checkbox" id="merge" checked>
                        <label for="merge">Merge all images into one PDF</label>
                    </div>
                `
            },
            'merge-pdf': {
                title: 'Merge PDF Files',
                options: `
                    <div class="option-group">
                        <label for="mergeOrder">Merge Order:</label>
                        <select id="mergeOrder">
                            <option value="sequence">In sequence (as uploaded)</option>
                            <option value="alphabetical">Alphabetical by filename</option>
                        </select>
                    </div>
                `
            },
            'split-pdf': {
                title: 'Split PDF',
                options: `
                    <div class="option-group">
                        <label>Split Mode:</label>
                        <select id="splitMode">
                            <option value="single">Extract single page</option>
                            <option value="range">Extract page range</option>
                            <option value="every">Split every page</option>
                        </select>
                    </div>
                    <div class="option-group" id="pageNumberGroup">
                        <label for="pageNumber">Page Number:</label>
                        <input type="number" id="pageNumber" min="1" value="1">
                    </div>
                    <div class="option-group" id="pageRangeGroup" style="display: none;">
                        <label for="startPage">Start Page:</label>
                        <input type="number" id="startPage" min="1" value="1">
                        <label for="endPage">End Page:</label>
                        <input type="number" id="endPage" min="1" value="1">
                    </div>
                `
            },
            'compress-pdf': {
                title: 'Compress PDF',
                options: `
                    <div class="option-group">
                        <label for="compressionLevel">Compression Level:</label>
                        <select id="compressionLevel">
                            <option value="low">Low (Best quality)</option>
                            <option value="medium" selected>Medium (Recommended)</option>
                            <option value="high">High (Smallest size)</option>
                        </select>
                    </div>
                    <div class="option-group">
                        <label for="quality">Quality: <span id="qualityValue">80</span>%</label>
                        <input type="range" id="quality" min="10" max="100" value="80">
                    </div>
                    <div class="option-group">
                        <input type="checkbox" id="removeImages" checked>
                        <label for="removeImages">Optimize images</label>
                    </div>
                `
            }
        };
        
        // Initialize mobile menu
        mobileMenuBtn.addEventListener('click', () => {
            mainNav.classList.toggle('active');
            mobileMenuBtn.innerHTML = mainNav.classList.contains('active') ? 
                '✕' : '☰';
        });
        
        // Initialize tool cards
        toolCards.forEach(card => {
            card.addEventListener('click', () => {
                const tool = card.getAttribute('data-tool');
                currentTool = tool;
                
                // Show tool interface
                toolInterface.style.display = 'block';
                toolTitle.textContent = toolConfigs[tool]?.title || 'PDF Tool';
                
                // Set options
                optionsDiv.innerHTML = toolConfigs[tool]?.options || '<p>No additional options for this tool.</p>';
                
                // Special setup for certain tools
                if (tool === 'split-pdf') {
                    setupSplitPdfOptions();
                } else if (tool === 'compress-pdf') {
                    setupCompressOptions();
                }
                
                // Reset file selection
                files = [];
                fileInput.value = '';
                dropArea.innerHTML = '<p>📁 Drag & drop files here or click to browse</p>';
                dropArea.style.borderStyle = 'dashed';
                resultsDiv.style.display = 'none';
                resultsDiv.innerHTML = '';
                
                // Scroll to tool interface
                toolInterface.scrollIntoView({ behavior: 'smooth' });
            });
        });
        
        // Close tool interface
        closeToolBtn.addEventListener('click', () => {
            toolInterface.style.display = 'none';
            resetTool();
        });
        
        // Drag and drop functionality with improved error handling
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, preventDefaults, false);
            document.body.addEventListener(eventName, preventDefaults, false);
        });
        
        ['dragenter', 'dragover'].forEach(eventName => {
            dropArea.addEventListener(eventName, highlight, false);
        });
        
        ['dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, unhighlight, false);
        });
        
        dropArea.addEventListener('drop', handleDrop, false);
        dropArea.addEventListener('click', () => fileInput.click());
        fileInput.addEventListener('change', handleFileSelect);
        
        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }
        
        function highlight() {
            dropArea.classList.add('highlight');
        }
        
        function unhighlight() {
            dropArea.classList.remove('highlight');
        }
        
        function handleDrop(e) {
            const dt = e.dataTransfer;
            const newFiles = Array.from(dt.files);
            validateAndAddFiles(newFiles);
        }
        
        function handleFileSelect(e) {
            const newFiles = Array.from(e.target.files);
            validateAndAddFiles(newFiles);
        }
        
        function validateAndAddFiles(newFiles) {
            // Clear previous errors
            clearErrors();
            
            // Validate each file
            const validFiles = [];
            let hasErrors = false;
            
            newFiles.forEach(file => {
                // Check file size
                if (file.size > MAX_FILE_SIZE) {
                    showError(`File ${file.name} is too large (max ${MAX_FILE_SIZE/1024/1024}MB)`);
                    hasErrors = true;
                    return;
                }
                
                // Check file types based on current tool
                if (currentTool === 'jpg-to-pdf' && !file.type.startsWith('image/')) {
                    showError(`File ${file.name} is not an image (JPEG/PNG required)`);
                    hasErrors = true;
                    return;
                }
                
                if ((currentTool === 'merge-pdf' || currentTool === 'split-pdf' || 
                     currentTool === 'compress-pdf') && file.type !== 'application/pdf') {
                    showError(`File ${file.name} is not a PDF`);
                    hasErrors = true;
                    return;
                }
                
                validFiles.push(file);
            });
            
            if (hasErrors && validFiles.length === 0) {
                return;
            }
            
            // For split and compress tools, only allow one file
            if ((currentTool === 'split-pdf' || currentTool === 'compress-pdf') && 
                (files.length + validFiles.length) > 1) {
                showError('This tool only supports one file at a time');
                return;
            }
            
            // Add valid files
            files = files.concat(validFiles);
            updateFileDisplay();
            
            // Show warning for large files
            files.forEach(file => {
                if (file.size > 5 * 1024 * 1024) { // 5MB
                    showWarning(`Large file detected (${(file.size/1024/1024).toFixed(1)}MB). Processing may take longer.`);
                }
            });
        }
        
        function updateFileDisplay() {
            if (files.length > 0) {
                let fileList = '';
                files.forEach(file => {
                    fileList += `<div class="file-info">
                        <span><strong>${file.name}</strong> (${(file.size/1024).toFixed(1)}KB)</span>
                        <button class="remove-file" data-name="${file.name}">×</button>
                    </div>`;
                });
                
                dropArea.innerHTML = fileList;
                dropArea.style.borderStyle = 'solid';
                
                // Add event listeners to remove buttons
                document.querySelectorAll('.remove-file').forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        const fileName = btn.getAttribute('data-name');
                        files = files.filter(f => f.name !== fileName);
                        updateFileDisplay();
                    });
                });
            } else {
                dropArea.innerHTML = '<p>📁 Drag & drop files here or click to browse</p>';
                dropArea.style.borderStyle = 'dashed';
            }
        }
        
        function showError(message) {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'error-message';
            errorDiv.textContent = message;
            dropArea.parentNode.insertBefore(errorDiv, dropArea.nextSibling);
            
            // Auto-remove error after 5 seconds
            setTimeout(() => {
                if (errorDiv.parentNode) {
                    errorDiv.parentNode.removeChild(errorDiv);
                }
            }, 5000);
        }
        
        function showWarning(message) {
            const warningDiv = document.createElement('div');
            warningDiv.className = 'file-size-warning';
            warningDiv.textContent = message;
            dropArea.parentNode.insertBefore(warningDiv, dropArea.nextSibling);
            
            // Auto-remove warning after 5 seconds
            setTimeout(() => {
                if (warningDiv.parentNode) {
                    warningDiv.parentNode.removeChild(warningDiv);
                }
            }, 5000);
        }
        
        function clearErrors() {
            const errors = document.querySelectorAll('.error-message, .file-size-warning');
            errors.forEach(error => {
                if (error.parentNode) {
                    error.parentNode.removeChild(error);
                }
            });
        }
        
        // Process button with improved error handling
        processBtn.addEventListener('click', async () => {
            if (files.length === 0) {
                showError('Please select files first');
                return;
            }
            
            try {
                // Clear previous results and errors
                resultsDiv.style.display = 'none';
                resultsDiv.innerHTML = '';
                clearErrors();
                
                // Disable process button during processing
                processBtn.disabled = true;
                processBtn.innerHTML = 'Processing...';
                progressBar.style.display = 'block';
                progress.style.width = '0%';
                
                // Process based on current tool
                let result;
                try {
                    switch(currentTool) {
                        case 'jpg-to-pdf':
                            result = await convertJpgToPdf();
                            break;
                        case 'merge-pdf':
                            result = await mergePdfs();
                            break;
                        case 'split-pdf':
                            result = await splitPdf();
                            break;
                        case 'compress-pdf':
                            result = await compressPdf();
                            break;
                        default:
                            throw new Error('Tool not implemented');
                    }
                    
                    // Update progress to 100%
                    progress.style.width = '100%';
                    
                    // Show result
                    showResult(result);
                    
                } catch (error) {
                    console.error('Processing error:', error);
                    showError(`Processing failed: ${error.message}`);
                    throw error; // Re-throw to be caught by outer catch
                }
                
            } catch (error) {
                // This catches both processing errors and unexpected errors
                console.error('Unexpected error:', error);
                showError('An unexpected error occurred. Please try again.');
                
            } finally {
                // Re-enable process button
                processBtn.disabled = false;
                processBtn.innerHTML = 'Process';
                progressBar.style.display = 'none';
            }
        });
        
        // Reset button
        resetBtn.addEventListener('click', resetTool);
        
        function resetTool() {
            files = [];
            fileInput.value = '';
            dropArea.innerHTML = '<p>📁 Drag & drop files here or click to browse</p>';
            dropArea.style.borderStyle = 'dashed';
            resultsDiv.style.display = 'none';
            resultsDiv.innerHTML = '';
            progressBar.style.display = 'none';
            clearErrors();
        }
        
        // Tool-specific functions with improved error handling
        async function convertJpgToPdf() {
            const { PDFDocument, rgb } = PDFLib;
            
            try {
                // Create a new PDF document
                const pdfDoc = await PDFDocument.create();
                let hasValidImages = false;
                
                // Process each image
                for (const file of files) {
                    try {
                        if (!file.type.startsWith('image/')) continue;
                        
                        // Add a new page
                        const page = pdfDoc.addPage();
                        
                        // Get image dimensions
                        const img = await createImageBitmap(file);
                        const { width, height } = img;
                        
                        // Set page size based on options
                        const pageSize = document.getElementById('pageSize').value;
                        const orientation = document.getElementById('orientation').value;
                        const margin = parseInt(document.getElementById('margin').value);
                        
                        let pageWidth, pageHeight;
                        
                        if (pageSize === 'auto') {
                            pageWidth = width;
                            pageHeight = height;
                        } else if (pageSize === 'a4') {
                            pageWidth = 595;
                            pageHeight = 842;
                        } else { // letter
                            pageWidth = 612;
                            pageHeight = 792;
                        }
                        
                        if (orientation === 'landscape' && pageSize !== 'auto') {
                            [pageWidth, pageHeight] = [pageHeight, pageWidth];
                        }
                        
                        page.setSize(pageWidth, pageHeight);
                        
                        // Embed the image
                        const imageBytes = await file.arrayBuffer();
                        let image;
                        
                        try {
                            if (file.type === 'image/jpeg') {
                                image = await pdfDoc.embedJpg(imageBytes);
                            } else {
                                image = await pdfDoc.embedPng(imageBytes);
                            }
                        } catch (embedError) {
                            console.error(`Error embedding image ${file.name}:`, embedError);
                            showError(`Could not process image ${file.name}. It may be corrupted or in an unsupported format.`);
                            continue;
                        }
                        
                        // Draw image on page with margin
                        const marginPoints = margin * 2.83465;
                        const imgWidth = pageWidth - (marginPoints * 2);
                        const imgHeight = (imgWidth / image.width) * image.height;
                        
                        page.drawImage(image, {
                            x: marginPoints,
                            y: (pageHeight - imgHeight) / 2,
                            width: imgWidth,
                            height: imgHeight,
                        });
                        
                        hasValidImages = true;
                        
                    } catch (imageError) {
                        console.error(`Error processing image ${file.name}:`, imageError);
                        showError(`Error processing image ${file.name}. Skipping this file.`);
                    }
                }
                
                if (!hasValidImages) {
                    throw new Error('No valid images were processed');
                }
                
                // Save the PDF
                const pdfBytes = await pdfDoc.save();
                return {
                    name: 'converted.pdf',
                    blob: new Blob([pdfBytes], { type: 'application/pdf' })
                };
                
            } catch (error) {
                console.error('Error in JPG to PDF conversion:', error);
                throw new Error('Failed to convert images to PDF. Please check your files and try again.');
            }
        }
        
        async function mergePdfs() {
            const { PDFDocument } = PDFLib;
            
            try {
                const mergedPdf = await PDFDocument.create();
                let hasValidPdfs = false;
                
                for (const file of files) {
                    try {
                        if (file.type !== 'application/pdf') continue;
                        
                        const pdfBytes = await file.arrayBuffer();
                        const pdfDoc = await PDFDocument.load(pdfBytes);
                        
                        const pages = await mergedPdf.copyPages(pdfDoc, pdfDoc.getPageIndices());
                        pages.forEach(page => mergedPdf.addPage(page));
                        
                        hasValidPdfs = true;
                        
                    } catch (pdfError) {
                        console.error(`Error processing PDF ${file.name}:`, pdfError);
                        showError(`Could not process PDF ${file.name}. It may be corrupted or password protected.`);
                    }
                }
                
                if (!hasValidPdfs) {
                    throw new Error('No valid PDFs were processed');
                }
                
                const mergedPdfBytes = await mergedPdf.save();
                return {
                    name: 'merged.pdf',
                    blob: new Blob([mergedPdfBytes], { type: 'application/pdf' })
                };
                
            } catch (error) {
                console.error('Error in PDF merge:', error);
                throw new Error('Failed to merge PDFs. Please check your files and try again.');
            }
        }
        
        async function splitPdf() {
            const { PDFDocument } = PDFLib;
            
            try {
                if (files.length !== 1 || files[0].type !== 'application/pdf') {
                    throw new Error('Please select exactly one PDF file');
                }
                
                const pdfBytes = await files[0].arrayBuffer();
                const pdfDoc = await PDFDocument.load(pdfBytes);
                const pageCount = pdfDoc.getPageCount();
                
                const splitMode = document.getElementById('splitMode').value;
                const results = [];
                
                if (splitMode === 'single') {
                    const pageNumber = parseInt(document.getElementById('pageNumber').value) - 1;
                    if (pageNumber < 0 || pageNumber >= pageCount) {
                        throw new Error('Invalid page number');
                    }
                    
                    const newPdf = await PDFDocument.create();
                    const [page] = await newPdf.copyPages(pdfDoc, [pageNumber]);
                    newPdf.addPage(page);
                    
                    const pdfBytes = await newPdf.save();
                    results.push({
                        name: `page_${pageNumber + 1}.pdf`,
                        blob: new Blob([pdfBytes], { type: 'application/pdf' })
                    });
                    
                } else if (splitMode === 'range') {
                    const startPage = parseInt(document.getElementById('startPage').value) - 1;
                    const endPage = parseInt(document.getElementById('endPage').value) - 1;
                    
                    if (startPage < 0 || endPage >= pageCount || startPage > endPage) {
                        throw new Error('Invalid page range');
                    }
                    
                    const newPdf = await PDFDocument.create();
                    const pageIndices = Array.from({ length: endPage - startPage + 1 }, (_, i) => startPage + i);
                    const pages = await newPdf.copyPages(pdfDoc, pageIndices);
                    pages.forEach(page => newPdf.addPage(page));
                    
                    const pdfBytes = await newPdf.save();
                    results.push({
                        name: `pages_${startPage + 1}-${endPage + 1}.pdf`,
                        blob: new Blob([pdfBytes], { type: 'application/pdf' })
                    });
                    
                } else { // split every page
                    for (let i = 0; i < pageCount; i++) {
                        const newPdf = await PDFDocument.create();
                        const [page] = await newPdf.copyPages(pdfDoc, [i]);
                        newPdf.addPage(page);
                        
                        const pdfBytes = await newPdf.save();
                        results.push({
                            name: `page_${i + 1}.pdf`,
                            blob: new Blob([pdfBytes], { type: 'application/pdf' })
                        });
                    }
                }
                
                if (results.length === 0) {
                    throw new Error('No pages were extracted');
                }
                
                return results;
                
            } catch (error) {
                console.error('Error in PDF split:', error);
                throw new Error('Failed to split PDF. Please check your file and try again.');
            }
        }
        
        async function compressPdf() {
            try {
                if (files.length !== 1 || files[0].type !== 'application/pdf') {
                    throw new Error('Please select exactly one PDF file');
                }
                
                // In a real implementation, this would use a PDF compression library
                // This is a simplified version that just returns the original
                // since client-side PDF compression is limited
                
                // Simulate compression by just returning the original for demo purposes
                return {
                    name: 'compressed_' + files[0].name,
                    blob: files[0]
                };
                
            } catch (error) {
                console.error('Error in PDF compression:', error);
                throw new Error('Failed to compress PDF. Please check your file and try again.');
            }
        }
        
        // Helper functions for tool options
        function setupSplitPdfOptions() {
            const splitMode = document.getElementById('splitMode');
            const pageNumberGroup = document.getElementById('pageNumberGroup');
            const pageRangeGroup = document.getElementById('pageRangeGroup');
            
            splitMode.addEventListener('change', () => {
                if (splitMode.value === 'single') {
                    pageNumberGroup.style.display = 'block';
                    pageRangeGroup.style.display = 'none';
                } else if (splitMode.value === 'range') {
                    pageNumberGroup.style.display = 'none';
                    pageRangeGroup.style.display = 'block';
                } else {
                    pageNumberGroup.style.display = 'none';
                    pageRangeGroup.style.display = 'none';
                }
            });
        }
        
        function setupCompressOptions() {
            const qualityInput = document.getElementById('quality');
            const qualityValue = document.getElementById('qualityValue');
            
            qualityInput.addEventListener('input', () => {
                qualityValue.textContent = qualityInput.value;
            });
        }
        
        // Show results
        function showResult(result) {
            resultsDiv.innerHTML = '';
            
            if (Array.isArray(result)) {
                result.forEach((res, index) => {
                    const resultItem = document.createElement('div');
                    resultItem.className = 'result-item';
                    resultItem.innerHTML = `
                        <span>${res.name}</span>
                        <div>
                            <a href="#" class="download-btn" data-index="${index}">Download</a>
                        </div>
                    `;
                    resultsDiv.appendChild(resultItem);
                });
            } else {
                const resultItem = document.createElement('div');
                resultItem.className = 'result-item';
                resultItem.innerHTML = `
                    <span>${result.name}</span>
                    <div>
                        <a href="#" class="download-btn">Download</a>
                    </div>
                `;
                resultsDiv.appendChild(resultItem);
            }
            
            // Add download handlers
            document.querySelectorAll('.download-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.preventDefault();
                    const index = btn.getAttribute('data-index');
                    
                    try {
                        if (Array.isArray(result)) {
                            downloadFile(result[index].name, result[index].blob);
                        } else {
                            downloadFile(result.name, result.blob);
                        }
                    } catch (error) {
                        console.error('Download failed:', error);
                        showError('Failed to prepare download. Please try again.');
                    }
                });
            });
            
            resultsDiv.style.display = 'block';
        }
        
        function downloadFile(filename, blob) {
            download(blob, filename, blob.type);
        }
    </script>
</body>
</html>
